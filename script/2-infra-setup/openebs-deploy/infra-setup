#!/bin/bash
set -x

job_id=$CI_JOB_ID
pipeline_id=$CI_PIPELINE_ID
commit_id=$CI_COMMIT_SHA
releaseTag=$FROM_VERSION

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

echo "Setting up test dependencies.."
${utils_path}/setup_dependencies infra-setup

# for i in efk-vars.yml efk.yml get_url.yml; do
#   wget https://raw.githubusercontent.com/openebs/e2e-infrastructure/master/workload/efk-client/playbook/$i
# done

# Applying e2e-CRD
echo "***Applying e2e-crd***********"
kubectl apply -f script/utils/e2e-crd.yml

echo "*****Deploying openebs*******"
bash script/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Waiting
bash script/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" openebs_version:"$releaseTag"
bash script/utils/e2e-cr jobname:s2-j2-cstor-striped-pool jobphase:Waiting 

source ~/.profile

######################################################

echo "Generating test name***************************"
test_name=$(bash script/utils/generate_test_name testcase=openebs-provision metadata="")
echo $test_name

## Clone the e2e repo, navigate to e2e root 

git clone https://github.com/openebs/upgrade
cd upgrade/e2e-tests

echo "Applying rbac.yml********************************"
kubectl apply -f ./hack/rbac.yaml
kubectl apply -f ./hack/crds.yaml

cp experiments/openebs-provision/run_e2e_test.yml run_openebs_provision.yml

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e '/name: OPENEBS_VERSION/{n;s/.*/            value: '"'$releaseTag'"'/}' \
-e '/name: COMMIT_ID/{n;s/.*/            value: charts/}' run_openebs_provision.yml

cat run_openebs_provision.yml

#################
## RUNNER MAIN ##
#################

echo "Copying kube config for e2e"
cp ~/.kube/config admin.conf
kubectl create cm kubeconfig --from-file=admin.conf -n e2e

echo "Running e2e test for openebs deploy.."

bash ../../script/utils/e2e_job_runner label='provider:openebs-runner' job=run_openebs_provision.yml

echo "Dumping state of cluster post job run"; echo ""
bash ../../script/utils/dump_cluster_state;
cd ../..
bash script/utils/event_updater jobname:s2-j1-openebs-deploy $test_name jobid:"$job_id" pipelineid:"$pipeline_id"
#################
## GET RESULT  ##
#################
rc_val=$(echo $?)

## Check the test status & result from the e2e result custom resource
source ~/.profile
testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

current_time=$(eval $time)
bash script/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:$testResult

if [ "$rc_val" != "0" ]; then
exit 1;
fi