## TODO: Modularize the gitlab yaml to reuse templates

stages:
  - cluster-setup
  - infra-setup
  - stateful-apps-deploy
  - chaos-test
  - cleanup
  - deploy

aws-cluster:
  image: atulabhi/kops:v8
  stage: cluster-setup
  script: 
    - ./script/aws

  artifacts:
    paths:
      - aws/

openebs-aws-deploy:
  image: atulabhi/kops:v8
  stage: infra-setup
  dependencies:
    - aws-cluster
  script: 
   - echo "deploying OpenEBS on AWS"
   - ./script/provider/infra-setup
  
  artifacts:
    paths:
      - aws-openebs/

percona-jiva:
  image: atulabhi/kops:v8
  stage: stateful-apps-deploy
  dependencies:
    - openebs-aws-deploy
  script: 
   - ./script/apps/percona/deployer/percona-app-deploy-jiva

  artifacts:
    paths:
      - aws-openebs/

mongo-jiva:
  image: atulabhi/kops:v8
  stage: stateful-apps-deploy
  dependencies:
    - openebs-aws-deploy
  script: 
   - ./script/apps/mongo/deployer/mongo-app-deploy-jiva

  artifacts:
    paths:
      - aws-openebs/

postgres-jiva:
  image: atulabhi/kops:v8
  stage: stateful-apps-deploy
  dependencies:
    - openebs-aws-deploy
  script: 
   - ./script/apps/postgres/deployer/postgres-app-deploy-jiva

  artifacts:
    paths:
      - aws-openebs/

cassandra-jiva:
  image: atulabhi/kops:v8
  stage: stateful-apps-deploy
  dependencies:
    - openebs-aws-deploy
  script: 
   - ./script/apps/cassandra/deployer/cassandra-app-deploy-jiva

  artifacts:
    paths:
      - aws-openebs/

jenkins-jiva:
  image: atulabhi/kops:v8
  stage: stateful-apps-deploy
  dependencies:
    - openebs-aws-deploy
  script: 
   - ./script/apps/jenkins/deployer/jenkins-app-deploy-jiva

  artifacts:
    paths:
      - aws-openebs/

percona-cstor:
  image: atulabhi/kops:v8
  stage: stateful-apps-deploy
  dependencies:
    - openebs-aws-deploy
  script: 
   - ./script/apps/percona/deployer/percona-app-deploy-cstor

  artifacts:
    paths:
      - aws-openebs/

jiva-replica-failure:
  image: atulabhi/kops:v8
  dependencies:
    - percona-jiva
  stage: chaos-test
  script:
   - ./script/apps/percona/chaos/jiva/volume-replica-failure

  artifacts:
    paths:
      - aws-openebs/

jiva-controller-failure:
  image: atulabhi/kops:v8
  dependencies:
    - jiva-replica-failure
  stage: chaos-test
  script:
   - ./script/apps/percona/chaos/jiva/volume-controller-failure

  artifacts:
    paths:
      - aws-openebs/

jiva-replica-nw-delay:
  image: atulabhi/kops:v8
  dependencies:
    - jiva-controller-failure
  stage: chaos-test
  script:
   - ./script/apps/percona/chaos/jiva/volume-replica-network-delay

  artifacts:
    paths:
      - aws-openebs/

jiva-controller-nw-delay:
  image: atulabhi/kops:v8
  dependencies:
    - jiva-replica-nw-delay
  stage: chaos-test
  script:
   - ./script/apps/percona/chaos/jiva/volume-controller-network-delay

  artifacts:
    paths:
      - aws-openebs/

cstor-target-failure:
  image: atulabhi/kops:v8
  dependencies:
    - percona-cstor
  stage: chaos-test
  script:
   - ./script/apps/percona/chaos/cstor/volume-target-failure

  artifacts:
    paths:
      - aws-openebs/

cstor-target-nw-delay:
  image: atulabhi/kops:v8
  dependencies:
    - cstor-target-failure
  stage: chaos-test
  script:
   - ./script/apps/percona/chaos/cstor/volume-target-network-delay

  artifacts:
    paths:
      - aws-openebs/

cleanup-aws:
  when: always
  image: atulabhi/kops:v8
  dependencies:
    - aws-cluster
  stage: cleanup
  script: 
    - chmod 755 ./script/aws-cleanup
    - ./script/aws-cleanup
